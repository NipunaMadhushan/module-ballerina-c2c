/*
 * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

apply from: "$rootDir/gradle/javaProject.gradle"

configurations {
    bDistributionDir
    extensionPlugin
    tooling
    zipPartent
}

dependencies {
    implementation project(":c2c-extension")
    implementation project(":c2c-tooling")

    testImplementation "org.ballerinalang:ballerina-lang:${ballerinaLangVersion}"
    testImplementation "com.github.docker-java:docker-java:${dockerJavaVersion}"
    testImplementation "io.fabric8:kubernetes-client:${fabric8KubernetesClientVersion}"
    testImplementation "org.slf4j:slf4j-api:${slf4jVersion}"
    testImplementation "org.testng:testng:${testngVersion}"
    testImplementation "org.ballerinalang:language-server-core:${ballerinaLangVersion}"
    testImplementation "org.ballerinalang:language-server-commons:${ballerinaLangVersion}"
    testImplementation "org.ballerinalang:language-server-cli:${ballerinaLangVersion}"
    testImplementation "org.ballerinalang:ballerina-cli:${ballerinaLangVersion}"



    testImplementation 'org.eclipse.lsp4j:org.eclipse.lsp4j:0.10.0'
    testImplementation 'org.eclipse.lsp4j:org.eclipse.lsp4j.jsonrpc:0.10.0'

    extensionPlugin project(path: ":c2c-extension", configuration: "shadow")
    tooling project(path: ":c2c-tooling")
    bDistributionDir project(path: ":c2c-ballerina", configuration: "bDistributionDir")
    zipPartent project(path: ":c2c-ballerina", configuration: "zipPartent")
}

description = 'Ballerina - C2C Extension Tests'

def distributionLocation = configurations.bDistributionDir.singleFile
def zipDirLocation = configurations.zipPartent.singleFile
task copyExtensionPlugin {
    dependsOn configurations.extensionPlugin
    doLast {
        copy {
            from configurations.extensionPlugin
            into file("${distributionLocation}/bre/lib/")
        }
    }
}

task copyTooling {
    dependsOn configurations.tooling
    copy {
        from file("${projectDir}/../c2c-tooling/build/libs/c2c-tooling-${version}.jar")
        into file("${distributionLocation}/lib/tools/lang-server/lib/")
    }
}

task copyBallerinaArtifacts {
    dependsOn configurations.zipPartent
    doLast {
        copy {
            from file("$zipDirLocation/bala/ballerina")
            into file("${distributionLocation}/repo/bala/ballerina")
        }
        copy {
            from file("$zipDirLocation/cache/ballerina")
            into file("${distributionLocation}/repo/cache/ballerina")
        }

    }
}

task prepareDistribution {
    dependsOn copyExtensionPlugin
    dependsOn copyBallerinaArtifacts
    dependsOn copyTooling
}

test {
    dependsOn prepareDistribution
    useTestNG() {
        if (project.hasProperty('Travis')) {
            suites 'src/test/resources/testng-integration.xml'
        } else {
            suites 'src/test/resources/testng.xml'
        }
        systemProperties = [
                "ballerina.home" : "${distributionLocation.absolutePath}/",
                "ballerina.version" : "${version}",
                "experimental" : "true",
                sampleDir      : System.getProperty('sampleDir', project.projectDir.absolutePath + "/../samples"),
                ballerinaPack  : System.getProperty('ballerinaPack', "$configurations.bDistributionDir.singleFile.absolutePath"),
                jacocoAgentLine: "-javaagent:${configurations.jacocoRuntime.asPath}=destfile=${test.jacoco.destinationFile.absolutePath},append=true,inclnolocationclasses=true,exclclassloader=jdk.internal.reflect.DelegatingClassLoader"
        ]
    }
}

// Disable publishing artifacts
tasks.withType(PublishToMavenRepository) {
    enabled = false
}
tasks.withType(PublishToMavenLocal) {
    enabled = false
}
